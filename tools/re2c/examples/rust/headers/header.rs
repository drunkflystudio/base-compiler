/* Generated by re2rust */
// re2rust $INPUT -o $OUTPUT --header lexer/state.rs

mod lexer;
use lexer::state::State; // the module is generated by re2c



fn lex(yyrecord: &mut State) -> usize {
    assert_eq!(yyrecord.yyinput.last(), Some(&0)); // expect null-terminated input

    let t: usize;
    
{
    #[allow(unused_assignments)]
    let mut yych : u8 = 0;
    let mut yystate : usize = 0;
    'yyl: loop {
        match yystate {
            0 => {
                yych = unsafe {*yyrecord.yyinput.get_unchecked(yyrecord.yycursor)};
                match yych {
                    0x61 => {
                        yyrecord.yycursor += 1;
                        yystate = 0;
                        continue 'yyl;
                    }
                    0x62 => {
                        yyrecord.yyt1 = yyrecord.yycursor;
                        yyrecord.yycursor += 1;
                        yystate = 2;
                        continue 'yyl;
                    }
                    _ => {
                        yyrecord.yyt1 = yyrecord.yycursor;
                        yystate = 1;
                        continue 'yyl;
                    }
                }
            }
            1 => {
                t = yyrecord.yyt1;
                { return t; }
            }
            2 => {
                yych = unsafe {*yyrecord.yyinput.get_unchecked(yyrecord.yycursor)};
                match yych {
                    0x62 => {
                        yyrecord.yycursor += 1;
                        yystate = 2;
                        continue 'yyl;
                    }
                    _ => {
                        yystate = 1;
                        continue 'yyl;
                    }
                }
            }
            _ => panic!("internal lexer error"),
        }
    }
}

}

fn main() {
    let mut st = State {
        yyinput: b"ab\0",
        yycursor: 0,
        yyt1: 0,
    };
    assert_eq!(lex(&mut st), 1);
}
/* Generated by re2rust */

pub struct State<'a> {
    pub yyinput: &'a [u8],
    pub yycursor: usize,
    pub yyt1: usize,
}
rust/headers/header.re:25:21: warning: rule matches empty string [-Wmatch-empty-string]
